{"version":3,"sources":["api/user/user.model.js"],"names":[],"mappings":"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","file":"api/user/user.model.js","sourcesContent":["'use strict';\r\n\r\nimport crypto from 'crypto';\r\nimport mongoose from 'mongoose';\r\nmongoose.Promise = require('bluebird');\r\nimport {Schema} from 'mongoose';\r\nimport autoIncrement from 'mongoose-auto-increment';\r\n\r\nconst authTypes = ['github', 'twitter', 'facebook', 'google'];\r\n\r\nvar UserSchema = new Schema({\r\n  userId : {type:Number,  default: 0, unique:true},\r\n  communityId : {type:Number,  default: -1, unique:true},\r\n  firstName: String,\r\n  lastName: String,\r\n  email: {\r\n    type: String,\r\n    lowercase: true\r\n  },\r\n  role: {\r\n    type: String, enum: ['CUSTOMER', 'PARTY', 'COMMUNITY_ADMIN', 'COMMUNITY_MEMBER', 'RESIDENT']\r\n  },\r\n  password: String,\r\n  provider: String,\r\n  salt: String,\r\n  facebook: {},\r\n  twitter: {},\r\n  google: {},\r\n  github: {},\r\n  gender: String,\r\n  dob: Date,\r\n  anniversary: Date,\r\n // role: {type: String, enum: ['CUSTOMER', 'PARTY']},\r\n  customerId:[{type : Schema.Types.ObjectId, ref : \"Customer\"}],\r\n  partyId:[{type : Schema.Types.ObjectId, ref : \"Party\"}],                            \r\n  location: {\r\n      type: String,\r\n      coordinates : {x: String, y: String}\r\n  }\r\n    \r\n});\r\n\r\n/**\r\n * Virtuals\r\n */\r\n\r\n// Public profile information\r\nUserSchema\r\n  .virtual('profile')\r\n  .get(function() {\r\n    return {\r\n      'name': this.name,\r\n      'role': this.role\r\n    };\r\n  });\r\n\r\n// Non-sensitive info we'll be putting in the token\r\nUserSchema\r\n  .virtual('token')\r\n  .get(function() {\r\n    return {\r\n      '_id': this._id,\r\n      'role': this.role\r\n    };\r\n  });\r\n\r\n/**\r\n * Validations\r\n */\r\n\r\n// Validate empty email\r\nUserSchema\r\n  .path('email')\r\n  .validate(function(email) {\r\n    if (authTypes.indexOf(this.provider) !== -1) {\r\n      return true;\r\n    }\r\n    return email.length;\r\n  }, 'Email cannot be blank');\r\n\r\n// Validate empty password\r\nUserSchema\r\n  .path('password')\r\n  .validate(function(password) {\r\n    if (authTypes.indexOf(this.provider) !== -1) {\r\n      return true;\r\n    }\r\n    return password.length;\r\n  }, 'Password cannot be blank');\r\n\r\n// Validate email is not taken\r\nUserSchema\r\n  .path('email')\r\n  .validate(function(value, respond) {\r\n    var self = this;\r\n    return this.constructor.findOne({ email: value }).exec()\r\n      .then(function(user) {\r\n        if (user) {\r\n          if (self.id === user.id) {\r\n            return respond(true);\r\n          }\r\n          return respond(false);\r\n        }\r\n        return respond(true);\r\n      })\r\n      .catch(function(err) {\r\n        throw err;\r\n      });\r\n  }, 'The specified email address is already in use.');\r\n\r\nvar validatePresenceOf = function(value) {\r\n  return value && value.length;\r\n};\r\n\r\n/**\r\n * Pre-save hook\r\n */\r\nUserSchema\r\n  .pre('save', function(next) {\r\n    // Handle new/update passwords\r\n    if (!this.isModified('password')) {\r\n      return next();\r\n    }\r\n\r\n    if (!validatePresenceOf(this.password) && authTypes.indexOf(this.provider) === -1) {\r\n      return next(new Error('Invalid password'));\r\n    }\r\n\r\n    // Make salt with a callback\r\n    this.makeSalt((saltErr, salt) => {\r\n      if (saltErr) {\r\n        return next(saltErr);\r\n      }\r\n      this.salt = salt;\r\n      this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\r\n        if (encryptErr) {\r\n          return next(encryptErr);\r\n        }\r\n        this.password = hashedPassword;\r\n        next();\r\n      });\r\n    });\r\n  });\r\n\r\n/**\r\n * Methods\r\n */\r\nUserSchema.methods = {\r\n  /**\r\n   * Authenticate - check if the passwords are the same\r\n   *\r\n   * @param {String} password\r\n   * @param {Function} callback\r\n   * @return {Boolean}\r\n   * @api public\r\n   */\r\n  authenticate(password, callback) {\r\n    if (!callback) {\r\n      return this.password === this.encryptPassword(password);\r\n    }\r\n\r\n    this.encryptPassword(password, (err, pwdGen) => {\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n\r\n      if (this.password === pwdGen) {\r\n        callback(null, true);\r\n      } else {\r\n        callback(null, false);\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Make salt\r\n   *\r\n   * @param {Number} byteSize Optional salt byte size, default to 16\r\n   * @param {Function} callback\r\n   * @return {String}\r\n   * @api public\r\n   */\r\n  makeSalt(byteSize, callback) {\r\n    var defaultByteSize = 16;\r\n\r\n    if (typeof arguments[0] === 'function') {\r\n      callback = arguments[0];\r\n      byteSize = defaultByteSize;\r\n    } else if (typeof arguments[1] === 'function') {\r\n      callback = arguments[1];\r\n    }\r\n\r\n    if (!byteSize) {\r\n      byteSize = defaultByteSize;\r\n    }\r\n\r\n    if (!callback) {\r\n      return crypto.randomBytes(byteSize).toString('base64');\r\n    }\r\n\r\n    return crypto.randomBytes(byteSize, (err, salt) => {\r\n      if (err) {\r\n        callback(err);\r\n      } else {\r\n        callback(null, salt.toString('base64'));\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Encrypt password\r\n   *\r\n   * @param {String} password\r\n   * @param {Function} callback\r\n   * @return {String}\r\n   * @api public\r\n   */\r\n  encryptPassword(password, callback) {\r\n    if (!password || !this.salt) {\r\n      return null;\r\n    }\r\n\r\n    var defaultIterations = 10000;\r\n    var defaultKeyLength = 64;\r\n    var salt = new Buffer(this.salt, 'base64');\r\n\r\n    if (!callback) {\r\n      return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength)\r\n                   .toString('base64');\r\n    }\r\n\r\n    return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength, (err, key) => {\r\n      if (err) {\r\n        callback(err);\r\n      } else {\r\n        callback(null, key.toString('base64'));\r\n      }\r\n    });\r\n  }\r\n};\r\nautoIncrement.initialize(mongoose.connection);\r\nUserSchema.plugin(autoIncrement.plugin, { model: 'User', field: 'userId', startAt: 1, incrementBy: 1 });\r\nexport default mongoose.model('User', UserSchema);\r\n"],"sourceRoot":"/source/"}